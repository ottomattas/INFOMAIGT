Description

In the first lecture, you learned about L-systems, and how they can be used to model plants. In this assignment, you will come up with a number of axioms and production rules that produce interesting 2D plant models. It is completely up to you what kind of plant models you want to generate. Be creative! You will submit a document of at most three pages containing three L-systems (axioms, production rules and parameters). For each L-system, you should describe what kind of plant it generates, and how the combination of axiom, production rules and parameters achieves this. Be sure to include some images of your results (they will not count towards the page limit).

We provide a simple Python program that can visualise non-parametric, context-free L-systems. For some "fancier" types of visualisation, you may want to modify these files.

You will be evaluated on the diversity and creativity of the L-systems you come up with, as well of the quality of your explanation on how they achieve the observed results. It is important that your three L-systems are sufficiently distinct; don't submit multiple systems that represent the same type of plant (e.g. three somewhat different types of trees). Your systems should also all include some randomness, they shouldn't generate the same model with every run.

Note that you will work on this project in pairs. You can sign up as a pair on the Groups page.



How to use the code

The LSystem class takes two arguments, a string (the axiom) and a dictionary with the production rules. The keys of dictionary should be single characters, and the associated value should be an object that yields a string with which the key should be replaced. For simple production rules, the value can just be a string (or, equivalently, a Rule object). We also provide a StochasticRule class, which represents multiple choices of replacement strings. Its constructor takes a list of tuples (probability, replacement string). The probabilities should always sum to one. The LSystem class contains an evaluate method, which applies the given number of iterations of production rules to the axiom, and returns the resulting string.

The TurtleDrawer class facilitates drawing the string constructed by the L-system. It takes three arguments: the length of a single forward-instruction, the width of the line to draw with, and the angle associated with the turning operations. It contains a draw method that takes as argument a string generated by an L-system, and optional parameters to control the starting position of the turtle, whether the movement of the turtle should be animated (it's faster without animation), and whether to clear the screen before drawing.



Submission

Please submit a PDF document of at most three pages containing the L-systems you designed, together with an explanation of how they produce the observed results. Also include some images of the models you generate. In addition, please submit the template files in a way that gives us easy access to your L-systems (e.g. by uncommenting some lines).
