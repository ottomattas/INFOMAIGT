Markov chains
-----------------------------
Assignment 1
Name a (board) game that can be perfectly modelled by a Markov chain.
* Snakes and Ladders.

Assignment 2
What important property can a level generated by a Markov chain not guarantee?
* The finishing tile to show up or even a platform to traverse.

Assignment 3
Given S = {a,b,c}, calculate the probability distribution P(St|Stâˆ’1) when training a Markov chain on the example sequence abbccbaabcba.
P(a|a) = 2/4
P(a|b) = 2/5
P(a|c) = 0
P(b|a) = 2/4
P(b|b) = 1/5
P(b|c) = 2/3
P(c|a) = 0
P(c|b) = 2/5
P(c|c) = 1/3

Assignment 4
Name three benefits of using a hierarchical Markov chain model over using only a single layer of Markov chains to generate levels.
* As the hierarchical model requires all possible states to be known and reachable, we can require a sparse and special (e.g finish) state to be present in a generated level.
* We can combine high- and low-level representations of a level to make the game consistent with input levels.
* We can have segmented (e.g ground, sky, transition platform) generation which makes the generation for a specific segment more expressive and interesting.
* We can give each modelled input tile a probability distribution.

Assignment 5
Name two local and two global constraints that we might want to enforce for Mario levels.
* Local: the ratio of different objects in a given area (e.g enemies/empty space) to make it reasonably distributed and not too busy/sparse for the player;
* Local: the distance of the "?" tiles from the ground below (e.g directly) to make it reachable for the player;
* Global: there should be a finish state at the end of the level;
* Global: the level should include all available objects in a certain ratio (e.g there should at least be one enemy, one reward, one "?")


Generative adversarial networks
-----------------------------
Assignment 1
Name three problems we might encounter if we applied GANs to Mario level generation.
* Small data set. The size and variety of the data set makes it difficult to train a proper model that would produce interesting results.
* Measuring performance of the model. Classical metrics like accuracy do not apply as we want our system to be expressive and not completely accurate.
* Controlling difficulty of a level. The generator might create a level which is extremely difficult or extremely simple.

Assignent 2
Name three things we could use style-based GANs for in games.
* NPCs to have more interesting visual (faces) and character features (headless horseman).
* Level generation through combining high- and low-level features.
	* Fit textures on a level to a style from another level. (e.g LvlX has snow in textures -> LvlY has also snow in textures)
	* Visual filtering to add a new visual style to the game. (e.g GTA -> life-like visuals)
* (Future) Music generation based on the specific play style of the player.

Assignment 3
Name three things we might use texture synthesis for in games.
* Adapt the generated texture to the context like season changes or dream-like sequences.
* Anthropomorphic character creation like a tree with a face or a sphinx.
* In-game paintings or art objects. (e.g a supervillain wants to get rid of all the noses in the world so the synthesis takes care of that.)

Assignment 4
Name three additional statistics that we could use in our agent-based fitness function.
* Ratio of successful runs (if using human-like agents). We don't want a 100% success to keep the level interesting.
* Ratio of points collected from different sources. We want to maybe balance these out between the sources so that each level comes with a nice distribution of objects to interact with.
* Ratio of time taken to succeed and the length of the level in distance. We want the level to have proper pacing. This metric would help us.