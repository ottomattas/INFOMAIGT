Inverse procedural modeling
-----------------------------
Assignment 1
Consider any regular k-gon P for k > 3 and a line l. If T is the set of rigid transformations (translations and rotations), how much of the perimeter of P is r-similar to l?

x being the length of a side of the k-gon
p = k * x
pnew = k  * (x-2r)

p% =  pnew  / p = k max[( x - 2r),0]  / k x = (x - 2r) / x 

eg. side is 10, r = 1
p% = 80%

Assignment 2
Why does the answer to the previous question not apply when k = 3?
* for k = 3 , the circles would intersect with other sides so the same formula can not be applied.

Assignment 3
What do we need to take care of when we apply the rules of our grammar?
* Crossing paths - guarantee that objects do not intersect with themselves;
* Termination - guarantee that at some point we stop.

Assignment 4
Name another technique that weâ€™ve seen before that could be used to explore the parameter space.
* Evolutionary computing and genetic programming.

Assignment 5
Name two other types of content that could be generated through the same system with minimal adjustment.
* Cars;
* Furniture (restricted to specific types of furniture);
* Clothes.



PCG in the Wild
-----------------------------
Assignment 1
Consider the techniques we have discussed in previous lectures. For each one, indicate whether you think they would be useful for generating a map for Age of Empires II. Briefly motivate each answer.

* Grammars - no. No way to model spatial structures directly.
* Agent-based - yes. We could generate a AoEII level in stages with an agent for each type of object.
* Simulation - no. We want realism with simulation and there is no physical process to simulate here as we want a map that is great from the gameplay perspective. The realistic map might even be bad from gameplay perspective.
* Genetic - maybe. It would be difficult to encode the genome for a level to have the full representation. On the other hand, we can use the input scripts in the genetic programming principle and use the method to generate new scripts.
* Markov chains - no. A Markov chain assigns a value for a (high-level) tile and those generated tiles are evaluated in succession which does not "play into" generating the whole map in a nice way. So it might generate great tiles but the sum total of those tiles might be bad.
* GANs - yes. Generation is easy because of the scripts - we can do a lot of learning based on them. The discriminator could be embedded with a good level design. Also, there are not too many hard requirements on a level in AoEII. Additionally, GANs can be easily modified manually for adjustments.
* Inverse Procedural Modelling - maybe. A partial style map could be drawn and a new actual map is generated as a result one is generated.

Assignment 2
Write a short reflection on the discrepancy between theoretical PCG research and its application in actual games. Why do you think the techniques we discussed are not used more in practice? What key elements of PCG techniques would need to be developed further for this to change? Where do you think
the techniques could already be applied more?
* For some reason, PCG is not usually applied fully. It is often just automating tedious tasks. As seen in the course, there are amazing techniques out there which are often not used for PCG.
I believe this is because the technical implementations of those methods are not described well enough. Yes, the theory and reasoning behind the implementation is given but not the implementation itself. Let me ask you - how should a potential new designer use those methods if no implementation is available for direct reference? When one algorithm can be implemented in at least three different ways?
I mean, most game designers do not keep their hand on the pulse of the science in the field, I guess. Why would they if there is only theoretical information. Yes, there are designers who take on the task for a specific goal. But if you are a regular designer or just a beginner in the field, you will refer to tutorials and code snippets, rather than an implementation which you cannot verify right away.
For some reason, people keep to their code. Sharing seems to have stopped indicating caring. If the researcher shared the code in appendices or in an open source repository, nobody would be using the old proven methods which are decades old.